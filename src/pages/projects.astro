---
import Layout from "../layouts/Layout.astro"
import Card from "../components/Card.astro"
import projects from "../../data/proyectos.json"
import Express from "../icons/Express.astro"
import Nestjs from "../icons/Nestjs.astro"
import React from "../icons/React.astro"
import Postgresql from "../icons/Postgresql.astro"
import GitHub from "../icons/GitHub.astro"
import Web from "../icons/Web.astro"
import Tailwind from "../icons/Tailwind.astro"
import Typescript from "../icons/Typescript.astro"
import Javascript from "../icons/Javascript.astro"
import Php from "../icons/Php.astro"
import Laravel from "../icons/Laravel.astro"
import Sequelize from "../icons/Sequelize.astro"
import Typeorm from "../icons/Typeorm.astro"

const badges = [
  {
    name: "Javascript",
    class: "w-3 h-3",
    icon: Javascript,
  },
  {
    name: "Typescript",
    class: "w-3 h-3",
    icon: Typescript,
  },
  {
    name: "PHP",
    class: "w-3 h-3",
    icon: Php,
  },
  {
    name: "Express",
    class: "w-3 h-3",
    icon: Express,
  },
  {
    name: "Nestjs",
    class: "w-3 h-3",
    icon: Nestjs,
  },
  {
    name: "Laravel",
    class: "w-3 h-3",
    icon: Laravel,
  },
  {
    name: "React",
    class: "w-3 h-3",
    icon: React,
  },
  {
    name: "Sequelize",
    class: "w-3 h-3",
    icon: Sequelize,
  },
  {
    name: "Typeorm",
    class: "w-3 h-3",
    icon: Typeorm,
  },
  {
    name: "Postgresql",
    class: "w-3 h-3",
    icon: Postgresql,
  },
  {
    name: "Tailwind",
    class: "w-3 h-3",
    icon: Tailwind,
  }
]
---

<Layout title="Proyectos">
  <main class="space-y-6">
    <p>Estos son algunos de mis proyectos</p>
    <ul class="w-[500px] space-y-6">
      {projects && projects.map(project => (
        <Card blur={project.blur}>
          <div slot="header" class="text-left">
            <p>{project.title}</p>
            <p>{project.subtitle}</p>
          </div>
          <div slot="body" class="space-y-2">
            <p class="font-bold underline">Descripción</p>
            <p>{project.description}</p>
          </div>
          <div slot="tags">
            {project.tags.length && 
              <div data-move-tags class="flex rounded-xl px-2 py-2 space-x-1 overflow-hidden transition-transform duration-300">
                {project.tags.map(name => 
                  badges.filter(badge => badge.name === name).map(tag =>
                    <div class="bg-grey-200 inline-flex items-center gap-2 px-5 py-[2px] border rounded-xl flex-shrink-0">
                      <tag.icon className={tag.class} />
                      <p class="text-[12px] select-none">{tag.name}</p>
                    </div>
                  )
                )}
              </div>
            }
            {!project.tags.length && <p>No hay etiquetas disponibles</p>}
          </div>
          <div slot="buttons" class="text-right">
              <a class="bg-grey-200 inline-flex px-5 py-1 gap-2 border rounded-xl" href={project.github}>
                <GitHub className="w-6 h-6" />
                Código fuente
              </a>
              <a class="bg-grey-200 inline-flex px-5 py-1 gap-2 border rounded-xl" href={project.link}>
                <Web className="w-6 h-6" />
                Sitio web
              </a>
          </div>
        </Card>
      ))}
    </ul>
  </main>
</Layout>

<script>
  const carousel = document.querySelector("[data-move-tags]") as HTMLButtonElement;

  let isDown: boolean = false;
  let startX: any;
  let scrollLeft: any;
  const isOverflowing = carousel.scrollWidth > carousel.clientWidth;

  if (isOverflowing) { 
    carousel.classList.add(
      "cursor-pointer", 
      "hover:bg-white", 
      "dark:hover:bg-black", 
      "hover:border",
      "dark:hover:border-purple-600"
    )
    carousel.addEventListener("mousedown", (e: MouseEvent) => {
      isDown = true;
      carousel.classList.add('active');
      startX = e.pageX - carousel.offsetLeft;
      scrollLeft = carousel.scrollLeft;
    });
    carousel.addEventListener('mouseleave', (e: MouseEvent) => {
      isDown = false;
      carousel.classList.remove('active');
    });
    carousel.addEventListener('mouseup', (e: MouseEvent) => {
      isDown = false;
      carousel.classList.remove('active');
    });
    carousel.addEventListener('mousemove', (e: MouseEvent) => {
      if (!isDown) return;
      e.preventDefault();
      const x = e.pageX - carousel.offsetLeft;
      const walk = (x - startX);
      carousel.scrollLeft = scrollLeft - walk;
    });
  }
</script>