---
import { badges } from '../scripts/badges';

export interface Props {
  id: number;
  className?: string;
  tags: string[];
}

const { id, className, tags } = Astro.props;
---

{tags.length
  ? <div data-tags-carousel={id} class={`${className} relative flex rounded-xl px-2 py-2 space-x-5 lg:space-x-1 overflow-hidden`}>
      {tags.map(name => 
        badges.filter(badge => badge.name === name).map(tag =>
          <div data-cy="tags" class="bg-grey-200 inline-flex items-center gap-5 lg:gap-2 px-10 py-[2px] lg:px-5 lg:py-[2px] border rounded-3xl lg:rounded-xl flex-shrink-0">
            <tag.icon className={tag.class} />
            <p data-cy="tag-name" class="text-[26px] lg:text-[12px] select-none">{tag.name}</p>
          </div>
        )
      )}
    </div>
  : <p>No hay etiquetas disponibles</p>
}

<script>
  import projects from "../../data/projects.json";

  projects.map(project => {
    const lgBreakPoint = 1024;
    const isLgOrAbove = () => { return window.innerWidth >= lgBreakPoint };

    const moveCarouselTouch = () => {
      const tagsCarouselTouch = document.querySelector(`[data-tags-carousel="${project.id}"]`) as HTMLElement;
      let startX: number;
      let scrollLeft: any;

      const touchStart = (e: TouchEvent) => {
        startX = e.touches[0].clientX;
        scrollLeft = tagsCarouselTouch.scrollLeft;
        tagsCarouselTouch.addEventListener('touchmove', touchMove);
        tagsCarouselTouch.addEventListener('touchend', touchEnd);
      }

      const touchMove = (e: TouchEvent) => {
        const currentX = e.touches[0].clientX - tagsCarouselTouch.offsetLeft;
        const walk = (currentX - startX);
        tagsCarouselTouch.scrollLeft = scrollLeft - walk;
      }

      const touchEnd = () => {
        tagsCarouselTouch.removeEventListener('touchmove', touchMove);
        tagsCarouselTouch.removeEventListener('touchend', touchEnd);
      }

      tagsCarouselTouch.addEventListener('touchstart', touchStart)
    }

    const moveCarouselBtn = () => {
      const tagsCarouselBtn = document.querySelector(`[data-tags-carousel="${project.id}"]`) as HTMLButtonElement;
      let isDown: boolean = false;
      let startX: any;
      let scrollLeft: any;

      tagsCarouselBtn.addEventListener("mousedown", (e: MouseEvent) => {
        isDown = true;
        tagsCarouselBtn.classList.add('active');
        startX = e.pageX - tagsCarouselBtn.offsetLeft;
        scrollLeft = tagsCarouselBtn.scrollLeft;
      });
      tagsCarouselBtn.addEventListener('mouseleave', (e: MouseEvent) => {
        isDown = false;
        tagsCarouselBtn.classList.remove('active');
      });
      tagsCarouselBtn.addEventListener('mouseup', (e: MouseEvent) => {
        isDown = false;
        tagsCarouselBtn.classList.remove('active');
      });
      tagsCarouselBtn.addEventListener('mousemove', (e: MouseEvent) => {
        if (!isDown) return;
        e.preventDefault();
        const x = e.pageX - tagsCarouselBtn.offsetLeft;
        const walk = (x - startX);
        tagsCarouselBtn.scrollLeft = scrollLeft - walk;
      });
    }

    if (isLgOrAbove()) moveCarouselBtn();
    else moveCarouselTouch()
    
    window.addEventListener('resize', () => {
      if (isLgOrAbove()) moveCarouselBtn();
      else moveCarouselTouch();
    })
  }
)

</script>