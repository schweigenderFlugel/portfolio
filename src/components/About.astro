---
import GeneralCard from './GeneralCard.astro';
import about from '../../data/about.json';
import Linkedin from '../icons/Linkedin.astro';
import GitHub from '../icons/GitHub.astro';
import Html from '../icons/Html.astro';
import Css from '../icons/Css.astro';
import Javascript from '../icons/Javascript.astro';
import Typescript from '../icons/Typescript.astro';
import Php from '../icons/Php.astro';
import Express from '../icons/Express.astro';
import Sequelize from '../icons/Sequelize.astro';
import Nestjs from '../icons/Nestjs.astro';
import Typeorm from '../icons/Typeorm.astro';
import Laravel from '../icons/Laravel.astro';
import React from '../icons/React.astro';
import Tailwind from '../icons/Tailwind.astro';
import Download from '../icons/Download.astro';
import AstroIcon from '../icons/AstroIcon.astro';
import Cypress from '../icons/Cypress.astro';
import Tooltip from './Tooltip.astro';
import Discord from '../icons/Discord.astro';
import Prisma from '../icons/Prisma.astro';
import Mongo from '../icons/Mongo.astro';
---

<GeneralCard>
  <div slot="header">
    <div data-cy="social" class="block space-x-6 lg:space-x-2">
      <button class="relative inline-flex justify-center" data-discord-username value={about.social.discord}>
        <Discord className="text-black dark:text-white w-[70px] h-[70px] lg:w-5 lg:h-5" />
      </button>
      <a href={about.social.linkedin} data-cy="linkedin" target="_blank" class="inline-flex items-center"><Linkedin className='w-[70px] h-[70px] lg:w-5 lg:h-5'/></a>
      <a href={about.social.github} data-cy="github" target="_blank" class="inline-flex items-center"><GitHub className='w-[72px] h-[72px] lg:w-6 lg:h-6'/></a>
    </div>
  </div>
  <div slot="description" class="grid grid-cols-12">
    <div class="col-span-10 space-y-3">
      <p class="text-purple-600">Hola, soy <strong data-cy="full-name" class="text-black dark:text-white">{about.fullName}</strong></p>
      <p data-cy="description">{about.description}</p>
    </div>
    <div class="flex justify-center items-center col-span-2">
      <button data-resume type="button" class="flex gap-2 justify-center items-center hover:text-purple-600 px-3 py-1">
        <Download className='w-20 h-20 lg:w-10 lg:h-10' /> 
      </button>
      <Tooltip keyword="resume" className="absolute inline-flex bg-purple-600 lg:text-[16px] text-[32px] px-6 py-3 lg:py-1.5 lg:px-3 mb-48 lg:mb-24">
        <p>Descargar CV</p>
      </Tooltip>
    </div>
  </div>
  <div slot="technologies" data-carousel class="flex gap-4 items-center overflow-hidden transition-transform duration-300">
    <Html className='h-[90px] w-[90px] lg:h-10 lg:w-10 flex-shrink-0' />
    <Css className='h-[82px] w-[82px] lg:h-9 lg:w-9 pt-[5px] flex-shrink-0' />
    <Javascript className='h-[70px] w-[70px] lg:h-8 lg:w-8 flex-shrink-0' />
    <Typescript className='h-[70px] w-[70px] lg:h-8 lg:w-8 flex-shrink-0' />
    <Php className='h-[70px] w-[70px] lg:h-10 lg:w-10 flex-shrink-0' /> 
    <Express className='h-[70px] w-[70px]lg:h-8 lg:w-8 flex-shrink-0' />
    <Sequelize className='h-[70px] w-[70px] lg:h-10 lg:w-10 flex-shrink-0' />
    <Nestjs className='h-[70px] w-[70px] lg:h-10 lg:w-10 flex-shrink-0' /> 
    <Typeorm className='h-[70px] w-[70px] lg:h-10 lg:w-10 flex-shrink-0' />
    <Laravel className='h-[70px] w-[70px] lg:h-10 lg:w-10 flex-shrink-0' />
    <React className='h-[70px] w-[70px] lg:h-10 lg:w-10 flex-shrink-0' />
    <AstroIcon className='h-[70px] w-[70px] lg:h-9 lg:w-9 flex-shrink-0' />
    <Tailwind className='h-[70px] w-[70px] lg:h-10 lg:w-10 flex-shrink-0' />
    <Cypress className='h-[70px] w-[70px] lg:h-10 lg:w-10 flex-shrink-0' />
    <Prisma className='h-[70px] w-[70px] lg:h-10 lg:w-10 flex-shrink-0' />
    <Mongo className='h-[70px] w-[70px] lg:h-10 lg:w-10 flex-shrink-0' />
  </div>
  <div slot="experience">
    <p data-cy-experience-years class="font-bold text-[40px] lg:text-[18px] text-purple-600 select-none">+{new Date().getFullYear() - about.experience}</p>
  </div>
</GeneralCard>

<script>
  const lgBreakPoint = 1024;
  const isLgOrAbove = () => { return window.innerWidth >= lgBreakPoint };

  // TOUCH EVENTS
  const touchEvents = () => {
    const carouselTouch = document.querySelector("[data-carousel]") as HTMLButtonElement;
    const resumeTouch = document.querySelector('[data-resume]') as HTMLButtonElement;
    const discordTouch = document.querySelector('[data-discord-username]') as HTMLButtonElement;
    const discordToast = document.querySelector('[data-toast="discord-copied"]') as HTMLElement;
    const discordErrorToast = document.querySelector('[data-toast="discord-error"]') as HTMLElement;

    let startX: number;
    let scrollLeft: any;

    discordTouch.addEventListener('touchstart', async (e: TouchEvent) => {
      e.preventDefault();
      try {
        const copyUsername = discordTouch.value;
        if (!copyUsername.length) throw new Error('could not copy text');
        await navigator.clipboard.writeText(copyUsername);
        discordToast.classList.remove('hidden');
        setTimeout(() => {
          discordToast.classList.add('hidden');
        }, 3000);
      } catch (error) {
        discordErrorToast.classList.remove('hidden');
        setTimeout(() => {
          discordErrorToast.classList.add('hidden');
        }, 3000);
      }
    })

    const touchStart = (e: TouchEvent) => {
      startX = e.touches[0].clientX;
      scrollLeft = carouselTouch.scrollLeft;
      carouselTouch.addEventListener('touchmove', touchMove);
      carouselTouch.addEventListener('touchend', touchEnd);
    }
    const touchMove = (e: TouchEvent) => {
      const currentX = e.touches[0].clientX - carouselTouch.offsetLeft;
      const walk = (currentX - startX);
      carouselTouch.scrollLeft = scrollLeft - walk;
    }
    const touchEnd = () => {
      carouselTouch.removeEventListener('touchmove', touchMove);
      carouselTouch.removeEventListener('touchend', touchEnd);
    }
    carouselTouch.addEventListener('touchstart', touchStart);

    resumeTouch.addEventListener('touchstart', async () => {
      // TODO
    });
  }
  
  // BUTTON EVENTS
  const btnEvents = () => {
    const carouselBtn = document.querySelector("[data-carousel]") as HTMLButtonElement;
    const resumeBtn = document.querySelector('[data-resume]') as HTMLButtonElement;
    const discordBtn = document.querySelector('[data-discord-username]') as HTMLButtonElement;
    const experience = document.querySelector('[data-experience]') as HTMLButtonElement;
    const technologies = document.querySelector('[data-technologies]') as HTMLButtonElement;
    const resumeTooltip = document.querySelector(`[data-tooltip="resume"]`) as HTMLElement;
    const technologiesTooltip = document.querySelector(`[data-tooltip="technologies"]`) as HTMLElement;
    const experienceTooltip = document.querySelector(`[data-tooltip="experience"]`) as HTMLElement;
    const discordToast = document.querySelector('[data-toast="discord-copied"]') as HTMLElement;
    const discordErrorToast = document.querySelector('[data-toast="discord-error"]') as HTMLElement;

    discordBtn.addEventListener('click', async (e: MouseEvent) => {
      e.preventDefault();
      try {
        const copyUsername = discordBtn.value;
        if (!copyUsername.length) throw new Error('could not copy text');
        await navigator.clipboard.writeText(copyUsername);
        discordToast.classList.remove('hidden');
        setTimeout(() => {
          discordToast.classList.add('hidden');
        }, 3000);
      } catch (error) {
        discordErrorToast.classList.remove('hidden');
        setTimeout(() => {
          discordErrorToast.classList.add('hidden');
        }, 3000);
      }
    })

    let isDown: boolean = false;
    let startX: any;
    let scrollLeft: any;
    const isOverflowing = carouselBtn.scrollWidth > carouselBtn.clientWidth;
  
    if (isOverflowing) {
      carouselBtn.classList.add('cursor-pointer');

      carouselBtn.addEventListener("mousedown", (e: MouseEvent) => {
        isDown = true;
        carouselBtn.classList.add('active');
        startX = e.pageX - carouselBtn.offsetLeft;
        scrollLeft = carouselBtn.scrollLeft;
      });
      carouselBtn.addEventListener('mouseleave', (e: MouseEvent) => {
        isDown = false;
        carouselBtn.classList.remove('active');
      });
      carouselBtn.addEventListener('mouseup', (e: MouseEvent) => {
        isDown = false;
        carouselBtn.classList.remove('active');
      });
      carouselBtn.addEventListener('mousemove', (e: MouseEvent) => {
        if (!isDown) return;
        e.preventDefault();
        const x = e.pageX - carouselBtn.offsetLeft;
        const walk = (x - startX);
        carouselBtn.scrollLeft = scrollLeft - walk;
      });
    };

    // Tooltip for resume and download
    resumeBtn.addEventListener('mouseover', (e: MouseEvent) => {
      e.preventDefault();
      resumeTooltip.classList.remove("hidden");
    });
    resumeBtn.addEventListener('mouseleave', (e: MouseEvent) => {
      e.preventDefault();
      resumeTooltip.classList.add("hidden");
    });
    resumeBtn.addEventListener('click', async () => {
      // TODO
    });

    // Tooltip for technologies
    technologies.addEventListener('mouseover', (e: MouseEvent) => {
      e.preventDefault();
      technologiesTooltip.classList.remove("hidden");
    });
    technologies.addEventListener('mouseleave', (e: MouseEvent) => {
      e.preventDefault();
      technologiesTooltip.classList.add("hidden");
    });
  
    // Tooltip for experience
    experience.addEventListener('mouseover', (e: MouseEvent) => {
      e.preventDefault();
      experienceTooltip.classList.remove("hidden");
    });
    experience.addEventListener('mouseleave', (e: MouseEvent) => {
      e.preventDefault();
      experienceTooltip.classList.add("hidden");
    });
  }

  if (isLgOrAbove()) btnEvents();
  else touchEvents();
    
  window.addEventListener('resize', () => {
    if (isLgOrAbove()) btnEvents();
    else touchEvents();
  })

</script>