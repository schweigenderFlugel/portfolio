---
import ProjectsCard from "../components/ProjectsCard.astro"
import projects from "../../data/projects.json"
import GitHub from "../icons/GitHub.astro"
import Web from "../icons/Web.astro"
import DetailsIcon from "../icons/DetailsIcon.astro"
import Tooltip from "../components/Tooltip.astro"
import ProjectDetails from "../components/ProjectDetails.astro"
---

<main class="space-y-12 lg:space-y-6">
  {projects.length && (
    <p>Estos son algunos de mis proyectos</p>
    <ul class="space-y-20 lg:space-y-8">
      {projects.map(project => (
        <ProjectsCard id={project.id}>
          <div slot="header" class="flex justify-between items-center">
            <div>
              <p data-cy="project-title">{project.title}</p>
              <p data-cy="project-subtitle">{project.subtitle}</p>
            </div>
            <div class="absolute right-2 inline-flex">
              <Tooltip id={project.id} className="inline-flex bg-purple-600 lg:text-[16px] text-[32px] px-6 py-3 lg:py-1.5 lg:px-3 mr-4 lg:mr-4">
                <p>Ver detalles</p>
              </Tooltip>
              <button data-open-details-modal={project.id} type="button" class="hover:text-purple-600 cursor-pointer">
                <DetailsIcon className="w-20 h-20 lg:w-8 lg:h-8" />
              </button>
            </div>
          </div>
          <div slot="buttons">
            <a data-github={project.id} class="inline-flex items-center px-10 py-6 lg:px-5 lg:py-2 gap-2 border rounded-full lg:rounded-xl bg-white dark:bg-black border-black dark:border-white hover:border-purple-600 hover:text-white dark:hover:text-purple-600 hover:bg-purple-600 dark:hover:bg-black dark:hover:border-purple-600" href={project.github} target="_blank">
              <GitHub className="w-12 h-12 lg:w-6 lg:h-6" />
              <p class="hidden lg:display-initial">CÃ³digo fuente</p>
            </a>
            <a data-website={project.id} class="inline-flex items-center px-10 py-6 lg:px-5 lg:py-2 gap-2 border rounded-full lg:rounded-xl bg-white dark:bg-black border-black dark:border-white hover:border-purple-600 hover:text-white dark:hover:text-purple-600 hover:bg-purple-600 dark:hover:bg-black dark:hover:border-purple-600" href={project.link} target="_blank">
              <Web className="w-12 h-12 lg:w-6 lg:h-6" />
              <p class="hidden lg:display-initial">Sitio web</p>
            </a>
          </div>
        </ProjectsCard>
        <div>
          <ProjectDetails 
            id={project.id} 
            description={project.description} 
            tags={project.tags} 
            publish={project.publish} 
          />
        </div>
      ))}
    </ul>
  )}
</main>

<script>
  import projects from "../../data/projects.json";

  projects.map(project => {
    const modal = document.querySelector(`[data-details-modal="${project.id}"]`) as HTMLElement;

    const lgBreakPoint = 1024;
    const isLgOrAbove = () => { return window.innerWidth >= lgBreakPoint };
  
    const modalBtn = () => {
      const tagsCarouselBtn = document.querySelector(`[data-tags-carousel="${project.id}"]`) as HTMLButtonElement;
      const openModalBtn = document.querySelector(`[data-open-details-modal="${project.id}"]`) as HTMLButtonElement;
      const closeModalBtn = document.querySelector(`[data-close-details-modal="${project.id}"]`) as HTMLButtonElement;
      const tooltip = document.querySelector(`[data-details-tooltip="${project.id}"]`) as HTMLElement;

      openModalBtn.addEventListener('mouseover', (e: MouseEvent) => {
        e.preventDefault();
        tooltip.classList.remove("hidden"); 
      });
      openModalBtn.addEventListener('mouseleave', (e: MouseEvent) => {
        e.preventDefault();
        tooltip.classList.add("hidden");
      })
      openModalBtn.addEventListener('click', (e: MouseEvent) => {
        e.preventDefault();
        modal.classList.add('flex');
        modal.classList.remove('hidden');
        document.body.style.overflow = "hidden";
        const isOverflowing = tagsCarouselBtn.scrollWidth > tagsCarouselBtn.clientWidth;
        if (isOverflowing) {
          tagsCarouselBtn.classList.add(
            "lg:cursor-pointer",
            "hover:border",
            "lg:hover:border-purple-600"
          )
        }
      });
      closeModalBtn.addEventListener('click', (e: MouseEvent) => {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        document.body.style.overflow = "auto";      
      })
    }

    const modalTouch = () => {
      const openModalTouch = document.querySelector(`[data-open-details-modal="${project.id}"]`) as HTMLButtonElement;
      const closeModalTouch = document.querySelector(`[data-close-details-modal="${project.id}"]`) as HTMLButtonElement;
      openModalTouch.addEventListener('touchstart', (e: TouchEvent) => {
        e.preventDefault();
        modal.classList.add('flex');
        modal.classList.remove('hidden');
        document.body.style.overflow = "hidden";
      });
      closeModalTouch.addEventListener('touchstart', (e: TouchEvent) => {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
        document.body.style.overflow = "auto";      
      })
    }

    if (isLgOrAbove()) modalBtn();
    else modalTouch();
    
    window.addEventListener('resize', () => {
      if (isLgOrAbove()) modalBtn();
      else modalTouch();
    })
  })

</script>